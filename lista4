#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_FABRICANTES 5
#define MAX_PRODUTOS 50
#define MAX_UF 27

typedef struct {
    char marca[50];
    char site[100];
    char telefone[15];
    char uf[3];
} Fabricante;

typedef struct {
    char descricao[50];
    float peso;
    float valorCompra;
    float valorVenda;
    float valorLucro;
    float percentualLucro;
    Fabricante fabricante;
} Produto;


// Função para validar a UF
int validar_uf(char uf[]) {
    char ufs[MAX_UF][3] = {"AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"};
    for (int i = 0; i < MAX_UF; i++) {
        if (strcmp(ufs[i], uf) == 0)
            return 1;
    }
    return 0;
}

void cadastrarFabricante(Fabricante *fabricantes, int *numFabricantes) {
    if (*numFabricantes >= MAX_FABRICANTES) {
        printf("\nLimite máximo de fabricantes atingido!\n");
        return;
    }

    Fabricante fabricante;

    printf("\n===============================================\n");
    printf("      CADASTRO DE FABRICANTE\n");
      printf("===============================================\n");

    printf("Digite a marca: ");
    fgets(fabricante.marca, 50, stdin);
    fabricante.marca[strcspn(fabricante.marca, "\n")] = '\0';
  
    printf("Digite o site: ");
    fgets(fabricante.site, 100, stdin);
    fabricante.site[strcspn(fabricante.site, "\n")] = '\0';

    printf("Digite o telefone: ");
    fgets(fabricante.telefone, 15, stdin);
    fabricante.telefone[strcspn(fabricante.telefone, "\n")] = '\0';

   int valido;
    do {
        printf("UF: ");
        scanf(" %[^\n]s", fabricante.uf);
        valido = validar_uf(fabricante.uf);
        if (!valido)
            printf("UF invalida. Tente novamente.\n");
    } while (!valido);
    fabricantes[*numFabricantes] = fabricante;
    (*numFabricantes)++;

    printf("\nFabricante cadastrado com sucesso!\n");
}

void cadastrarProduto(Produto *produtos, int *numProdutos, Fabricante *fabricantes, int numFabricantes) {
    if (*numProdutos >= MAX_PRODUTOS) {
        printf("\nLimite máximo de produtos atingido!\n");
        return;
    }

    Produto produto;

    printf("\n===============================================\n");
    printf("      CADASTRO DE PRODUTO\n");
      printf("===============================================\n");

    printf("Digite a descrição: ");
    fgets(produto.descricao, 50, stdin);
    produto.descricao[strcspn(produto.descricao, "\n")] = '\0';

    printf("Digite o peso (em gramas): ");
    scanf("%f", &produto.peso);
    getchar();

    while (produto.peso < 50 || produto.peso > 50000) {
        printf("Peso inválido! Digite novamente (entre 50g e 50kg): ");
        scanf("%f", &produto.peso);
        getchar();
    }

    printf("Digite o valor de compra: ");
    scanf("%f", &produto.valorCompra);
    getchar();

    while (produto.valorCompra < 0.5 || produto.valorCompra > 8000) {
        printf("Valor de compra inválido! Digite novamente (entre R$ 0,50 e R$ 8.000): ");
        scanf("%f", &produto.valorCompra);
        getchar();
    }

    printf("Digite o valor de venda: ");
    scanf("%f", &produto.valorVenda);
    getchar();

    while (produto.valorVenda < 1 || produto.valorVenda > 10000) {
        printf("Valor de venda inválido! Digite novamente (entre R$ 1,00 e R$ 10.000): ");
        scanf("%f", &produto.valorVenda);
        getchar();
    }

    produto.valorLucro = produto.valorVenda - produto.valorCompra;
    produto.percentualLucro = (produto.valorLucro / produto.valorCompra) * 100;

    printf("Digite a marca do fabricante: ");
    fgets(produto.fabricante.marca, 50, stdin);
    produto.fabricante.marca[strcspn(produto.fabricante.marca, "\n")] = '\0';

    int found = 0;
    for (int i = 0; i < numFabricantes; i++) {
        if (strcmp(produto.fabricante.marca, fabricantes[i].marca) == 0) {
            produto.fabricante = fabricantes[i];
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Fabricante não encontrado! Cadastre o fabricante primeiro.\n");
        return;
    }

    produtos[*numProdutos] = produto;
    (*numProdutos)++;

    printf("\nProduto cadastrado com sucesso!\n");
}

void listarMarcas(Fabricante *fabricantes, int numFabricantes) {
    printf("\n=====================================================\n");
    printf("     RELATÓRIO 1 - LISTA DE TODAS AS MARCAS\n");
    printf("=====================================================\n");
  
    printf("-------------+----------------+------------------+-----\n");
    printf("Marca        |   Site         | Telefone         | UF  \n");
    printf("-------------+----------------+------------------+-----\n");
    for (int i = 0; i < numFabricantes; i++) {
        printf("%-13s|%-16s|%-18s|%-5s\n", fabricantes[i].marca, fabricantes[i].site, fabricantes[i].telefone,
               fabricantes[i].uf);
    }
    printf("-------------+----------------+------------------+-----\n");
}

void listarProdutos(Produto *produtos, int numProdutos) {
    printf("\n=========================================================================================================\n");
    printf("                                 RELATÓRIO 2 - LISTA DE TODOS OS PRODUTOS\n");
    printf("=========================================================================================================\n");

    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("Descrição    |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < numProdutos; i++) {
        printf("%-13s|%-8.2f|%-15.2f|%-15.2f|%-13.2f|%-17.2f|%-24s\n", produtos[i].descricao, produtos[i].peso,
               produtos[i].valorCompra, produtos[i].valorVenda, produtos[i].valorLucro,
               produtos[i].percentualLucro, produtos[i].fabricante.marca);
    }
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}

void listarProdutosEstado(Produto *produtos, int numProdutos) {
    char estado[3];
    printf("\nDigite a UF do estado: ");
    fgets(estado, 3, stdin);
    estado[strcspn(estado, "\n")] = '\0';
  getchar();

    printf("\n===========================================================================================================\n");
    printf("                       RELATÓRIO 3 - LISTA DE PRODUTOS POR ESTADO (%s)\n", estado);
    printf("===========================================================================================================\n");

    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("Descrição    |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < numProdutos; i++) {
        if (strcmp(produtos[i].fabricante.uf, estado) == 0) {
            printf("%-13s|%-8.2f|%-15.2f|%-15.2f|%-13.2f|%-17.2f|%-24s\n", produtos[i].descricao, produtos[i].peso,
                   produtos[i].valorCompra, produtos[i].valorVenda, produtos[i].valorLucro,
                   produtos[i].percentualLucro, produtos[i].fabricante.marca);
        }
    }
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}

void listarProdutosMarca(Produto *produtos, int numProdutos) {
    char marca[50];
    printf("\nDigite a marca do produto: ");
    fgets(marca, 50, stdin);
    marca[strcspn(marca, "\n")] = '\0';
  getchar(); 

    printf("\n=============================================================================================================\n");
    printf("                        RELATÓRIO 4 - LISTA DE PRODUTOS POR MARCA (%s)\n", marca);
    printf("=============================================================================================================\n");

    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("Descrição    |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < numProdutos; i++) {
        if (strcmp(produtos[i].fabricante.marca, marca) == 0) {
            printf("%-13s|%-8.2f|%-15.2f|%-15.2f|%-13.2f|%-17.2f|%-24s\n", produtos[i].descricao, produtos[i].peso,
                   produtos[i].valorCompra, produtos[i].valorVenda, produtos[i].valorLucro,
                   produtos[i].percentualLucro, produtos[i].fabricante.marca);
        }
    }
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}

void listarProdutosEstadoMaisCaros(Produto *produtos, int numProdutos) {
    float maiorValor = 0;
    char estadosMaisCaros[30][3];
    int numEstados = 0;

    for (int i = 0; i < numProdutos; i++) {
        if (produtos[i].valorVenda > maiorValor) {
            maiorValor = produtos[i].valorVenda;
            strcpy(estadosMaisCaros[0], produtos[i].fabricante.uf);
            numEstados = 1;
        } else if (produtos[i].valorVenda == maiorValor) {
            int found = 0;
            for (int j = 0; j < numEstados; j++) {
                if (strcmp(produtos[i].fabricante.uf, estadosMaisCaros[j]) == 0) {
                    found = 1;
                    break;
                }
            }
            if (!found) {
                strcpy(estadosMaisCaros[numEstados], produtos[i].fabricante.uf);
                numEstados++;
            }
        }
    }

    printf("\n=============================================================================================================\n");
    printf("                RELATÓRIO 5 - LISTA DE PRODUTOS POR ESTADO COM VALOR MAIS CARO DE VENDA\n");
    printf("=============================================================================================================\n");

    printf("Estado(s) com valor mais caro de venda: ");
    for (int i = 0; i < numEstados; i++) {
        printf("%s ", estadosMaisCaros[i]);
    }
    printf("\n");

    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("Descrição    |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < numProdutos; i++) {
        for (int j = 0; j < numEstados; j++) {
            if (strcmp(produtos[i].fabricante.uf, estadosMaisCaros[j]) == 0 && produtos[i].valorVenda == maiorValor) {
                printf("%-13s|%-8.2f|%-15.2f|%-15.2f|%-13.2f|%-17.2f|%-24s\n", produtos[i].descricao, produtos[i].peso,
                       produtos[i].valorCompra, produtos[i].valorVenda, produtos[i].valorLucro,
                       produtos[i].percentualLucro, produtos[i].fabricante.marca);
            }
        }
    }
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}

// Função para encontrar o produto mais barato e listar os fabricantes em que ele está registrado
void encontrar_produtos_mais_baratos(Produto produtos[], int num_produtos) {
    int i;
    float valor_min = produtos[0].valorVenda;

    for (i = 1; i < num_produtos; i++) {
        if (produtos[i].valorVenda < valor_min) {
            valor_min = produtos[i].valorVenda;
        }
    }
    printf("\n======================================================================================\n");
    printf("      RELATÓRIO 6 - FABRICANTE(S) ONDE ESTÁ REGISTRADO O PRODUTO MAIS BARATO\n");
    printf("======================================================================================\n");

    printf("-------------+----------------+----------------+------+-------------------+---------------\n");
    printf("Marca        |   Site         | Telefone       | UF   |   Produto         | Valor Venda   \n");
    printf("-------------+----------------+----------------+------+-------------------+---------------\n");
    for (int i = 0; i < num_produtos; i++) {
        if (produtos[i].valorVenda == valor_min) {
            printf("%-13s|%-16s|%-16s|%-6s|%-19s|%-15.2f\n", produtos[i].fabricante.marca, produtos[i].fabricante.site,
                   produtos[i].fabricante.telefone, produtos[i].fabricante.uf, produtos[i].descricao, produtos[i].valorVenda);
        }
    }
     printf("-------------+----------------+----------------+------+-------------------+---------------\n");
}

// Função de comparação para o qsort (ordenação por valor de um produto)
int comparar_valor(const void *a, const void *b) {
    const Produto *produto1 = (const Produto *)a;
    const Produto *produto2 = (const Produto *)b;

    if (produto1->valorVenda < produto2->valorVenda) {
        return -1;
    } else if (produto1->valorVenda > produto2->valorVenda) {
        return 1;
    } else {
        return 0;
    }
}

// Função de comparação para o qsort (ordenação por valor do lucro de um produto)
int comparar_lucro(const void *a, const void *b) {
    const Produto *produto1 = (const Produto *)a;
    const Produto *produto2 = (const Produto *)b;

    if (produto1->valorLucro < produto2->valorLucro ) {
        return -1;
    } else if (produto1->valorLucro  > produto2->valorLucro ) {
        return 1;
    } else {
        return 0;
    }
}

// Função de comparação para o qsort (ordenação por percentual de lucro de um produto)
int comparar_percentual_lucro(const void *a, const void *b) {
    const Produto *produto1 = (const Produto *)a;
    const Produto *produto2 = (const Produto *)b;

    if (produto1->percentualLucro < produto2->percentualLucro) {
        return -1;
    } else if (produto1->percentualLucro > produto2->percentualLucro) {
        return 1;
    } else {
        return 0;
    }
}

// Função para listar todos os produtos em ordem crescente de valor
void listar_produtos_ordem_valor(Produto produtos[], int num_produtos) {
    qsort(produtos, num_produtos, sizeof(Produto), comparar_valor);

    printf("\n============================================================================================================\n");
    printf("                RELATÓRIO 7 - LISTA DE TODOS OS PRODUTOS EM ORDEM CRESCENTE DE VALOR DE VENDA \n");
    printf("============================================================================================================\n");

    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("| Descrição   |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < num_produtos; i++) {
        printf("| %-11s | %-6.2f | R$ %-10.2f | R$ %-10.2f | R$ %-8.2f | %-15.2f | %-22s \n",
               produtos[i].descricao, produtos[i].peso, produtos[i].valorCompra, produtos[i].valorVenda,
               produtos[i].valorLucro, produtos[i].percentualLucro, produtos[i].fabricante.marca);
    }
    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}


// Função para listar todos os produtos em ordem crescente de maior valor do lucro
void listar_produtos_ordem_lucro(Produto produtos[], int num_produtos) {
    qsort(produtos, num_produtos, sizeof(Produto), comparar_lucro);
 printf("\n================================================================================================================\n");
    printf("            RELATÓRIO 8 - LISTA DE TODOS OS PRODUTOS EM ORDEM CRESCENTE DE VALOR DO LUCRO\n");
   printf("================================================================================================================\n");

    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("| Descrição   |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < num_produtos; i++) {
        printf("| %-11s | %-6.2f | R$ %-10.2f | R$ %-10.2f | R$ %-8.2f | %-15.2f | %-22s \n",
               produtos[i].descricao, produtos[i].peso, produtos[i].valorCompra, produtos[i].valorVenda,
               produtos[i].valorLucro, produtos[i].percentualLucro, produtos[i].fabricante.marca);
    }
    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}
// Função para listar todos os produtos em ordem crescente de maior percentual de lucro
void listar_produtos_ordem_percentual_lucro(Produto produtos[], int num_produtos) {
    qsort(produtos, num_produtos, sizeof(Produto), comparar_percentual_lucro);

    printf("\n============================================================================================================\n");
    printf("            RELATÓRIO 9 - LISTA DE TODOS OS PRODUTOS EM ORDEM CRESCENTE DE PERCENTUAL DE LUCRO\n");
    printf("============================================================================================================\n");

    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("| Descrição   |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < num_produtos; i++) {
        printf("| %-11s | %-6.2f | R$ %-10.2f | R$ %-10.2f | R$ %-8.2f | %-15.2f | %-22s \n",
               produtos[i].descricao, produtos[i].peso, produtos[i].valorCompra, produtos[i].valorVenda,
               produtos[i].valorLucro, produtos[i].percentualLucro, produtos[i].fabricante.marca);
    }
    printf("+-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}
 
// Função de comparação para ordenação em ordem alfabética crescente
int comparar_alfabeticamente_crescente(const void *a, const void *b) {
    Produto *produtoA = (Produto *)a;
    Produto *produtoB = (Produto *)b;

    return strcmp(produtoA->descricao, produtoB->descricao);
}

// Função de comparação para ordenação em ordem alfabética decrescente
int comparar_alfabeticamente_decrescente(const void *a, const void *b) {
    Produto *produtoA = (Produto *)a;
    Produto *produtoB = (Produto *)b;

    return strcmp(produtoB->descricao, produtoA->descricao);
}
void exibir_produtos(Produto produtos[], int numProdutos) {
 printf("\n===============================================================================================================\n");
    printf("            RELATÓRIO 10 - LISTA DE TODOS OS PRODUTOS EM ORDEM ALFABETICA CRESCENTE A-Z\n");
   printf("===============================================================================================================\n");

    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    printf("Descrição    |  Peso  | Valor Compra  | Valor Venda   | Valor Lucro | Percentual Lucro|       Fabricante       \n");
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
    for (int i = 0; i < numProdutos; i++) {
        printf("%-13s|%-8.2f|%-15.2f|%-15.2f|%-13.2f|%-17.2f|%-24s\n", produtos[i].descricao, produtos[i].peso,
               produtos[i].valorCompra, produtos[i].valorVenda, produtos[i].valorLucro,
               produtos[i].percentualLucro, produtos[i].fabricante.marca);
    }
    printf("-------------+--------+---------------+---------------+-------------+-----------------+------------------------\n");
}

// Função de comparação para o qsort (ordenação por marca em ordem alfabética decrescente)
int comparar_marca_decrescente(const void *a, const void *b) {
    const Fabricante *fabricante1 = (const Fabricante *)a;
    const Fabricante *fabricante2 = (const Fabricante *)b;

    return strcmp(fabricante2->marca, fabricante1->marca);
}

void exibir_marcas_decrescente(Fabricante *fabricantes, int numFabricantes) {
    printf("\n=======================================================\n");
    printf("   RELATÓRIO 11 - LISTA DE TODAS AS MARCAS (Z-A)\n");
    printf("=======================================================\n");

    // Ordenar os fabricantes em ordem alfabética decrescente (Z-A)
    qsort(fabricantes, numFabricantes, sizeof(Fabricante), comparar_marca_decrescente);

    printf("-------------+----------------+------------------+-----\n");
    printf("Marca        |   Site         | Telefone         | UF  \n");
    printf("-------------+----------------+------------------+-----\n");
    for (int i = 0; i < numFabricantes; i++) {
        printf("%-13s|%-16s|%-18s|%-5s\n", fabricantes[i].marca, fabricantes[i].site, fabricantes[i].telefone,
               fabricantes[i].uf);
    }
    printf("-------------+----------------+------------------+-----\n");
}

int main() {
    Fabricante fabricantes[MAX_FABRICANTES];
    int numFabricantes = 0;

    Produto produtos[MAX_PRODUTOS];
    int numProdutos = 0;

    char opcao;

    do {
        printf("\n================================================================================\n");
        printf("                                MENU PRINCIPAL\n");
        printf("================================================================================\n");
        printf("  [1]  Cadastrar fabricante\n");
        printf("  [2]  Cadastrar produto\n");
        printf("  [3]  Listar todas as marcas\n");
        printf("  [4]  Listar todos os produtos\n");
        printf("  [5]  Listar os produtos de um determinado estado  \n");
        printf("  [6]  Listar os produtos de uma determinada marca\n");
        printf("  [7]  Apresentar o(s) estado(s) onde está registrado o produto mais caro\n");
        printf("  [8]  Fabricante(s) com produto mais barato\n");
        printf("  [9]  Listar todos os produtos em ordem crescente de maior valor de venda\n");
        printf("  [V]  Listar todos os produtos em ordem crescente de maior 'valor do lucro'\n");
        printf("  [P]  Listar todos os produtos em ordem crescente de maior 'percentual de lucro'\n");
        printf("  [A]  Listar todos os produtos em ordem alfabetica crescente A-Z\n");
        printf("  [Z]  Listar todas as marcas em ordem alfabetica decrescente Z-A\n");
        printf("  [0]  Sair\n");
      
        printf("Escolha uma opção: ");
        scanf(" %c", &opcao);
        getchar();

        switch (opcao) {
            case '1':
                cadastrarFabricante(fabricantes, &numFabricantes);
                break;
            case '2':
            if (numFabricantes < 2) {
                  printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 2 fabricantes antes de cadastrar os produtos.\n");       printf("=====================================================================================\n");
            } else {
                cadastrarProduto(produtos, &numProdutos, fabricantes, numFabricantes);
            }
            break;
            case '3':
               if (numFabricantes < 2) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 2 fabricantes antes de ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listarMarcas(fabricantes, numFabricantes);}
                break;
            case '4':
              if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listarProdutos(produtos, numProdutos);}
                break;
            case '5':if (numProdutos < 5) {                   printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listarProdutosEstado(produtos, numProdutos);}
                break;
            case '6':
              if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listarProdutosMarca(produtos, numProdutos);}
                break;
            case '7':if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listarProdutosEstadoMaisCaros(produtos, numProdutos);}
                break;
          case '8':
            if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                encontrar_produtos_mais_baratos(produtos, numProdutos);}
                break;
             case '9':if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listar_produtos_ordem_valor(produtos, numProdutos);}
                 break;
              case 'V':
            case 'v':
               if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
                listar_produtos_ordem_lucro(produtos, numProdutos);}
                 break;
             case 'P':
            case 'p':
               if (numProdutos < 5) {               printf("\n=====================================================================================\n");
                printf("É necessário cadastrar no mínimo 5 produtos  antes ter acesso a essas informações.\n");   printf("=====================================================================================\n");
            } else {
          listar_produtos_ordem_percentual_lucro(produtos, numProdutos);}
                break;
             case 'A':
            case 'a':
                if (numProdutos > 0) {
                    qsort(produtos, numProdutos, sizeof(Produto), comparar_alfabeticamente_crescente);
                    exibir_produtos(produtos, numProdutos);
                } else {
                    printf("Nenhum produto cadastrado.\n");
                }
                break;
            case 'Z':
              case 'z':
                exibir_marcas_decrescente(fabricantes, numFabricantes);
                break;
            case '0':
                printf("\nSaindo do programa...\n");
                break;
            default:
                printf("\nOpção inválida! Tente novamente.\n");
                break;
        }
    } while (opcao != '0');

    return 0;
}
